

: ':' [ CHAR : ] LITERAL ;
: ';' [ CHAR ; ] LITERAL ;
: '(' [ CHAR ( ] LITERAL ;
: ')' [ CHAR ) ] LITERAL ;
: '"' [ CHAR " ] LITERAL ;
: '.' [ CHAR . ] LITERAL ;

: ( IMMEDIATE 1 BEGIN KEY DUP '(' = IF DROP 1+ ELSE ')' = IF 1- THEN THEN DUP 0= UNTIL DROP ;
: SPACES BEGIN DUP 0> WHILE SPACE 1- REPEAT DROP ;
: WITHIN -ROT OVER <= IF > IF TRUE ELSE FALSE THEN ELSE 2DROP FALSE THEN ;
: ALIGNED 3 + 3 INVERT AND ;
: ALIGN HERE @ ALIGNED HERE ! ;
: C, HERE @ C! 1 HERE +! ;
: S" IMMEDIATE ( -- addr len )
	STATE @ IF
		' LITS , HERE @ 0 ,
		BEGIN KEY DUP '"'
                <> WHILE C, REPEAT
		DROP DUP HERE @ SWAP - 4- SWAP ! ALIGN
	ELSE
		HERE @
		BEGIN KEY DUP '"'
                <> WHILE OVER C! 1+ REPEAT
		DROP HERE @ - HERE @ SWAP
	THEN
;

: ." IMMEDIATE ( -- )
	STATE @ IF
		[COMPILE] S" ' TELL ,
	ELSE
		BEGIN KEY DUP '"' = IF DROP EXIT THEN EMIT AGAIN
	THEN
;


: JF-HERE   HERE ;
: JF-CREATE   CREATE ;
: JF-FIND   FIND ;
: JF-WORD   WORD ;

: HERE   JF-HERE @ ;
: ALLOT   HERE + JF-HERE ! ;

: [']   ' LIT , ; IMMEDIATE
: '   JF-WORD JF-FIND >CFA ;

: CELL+  4 + ;

: ALIGNED   3 + 3 INVERT AND ;
: ALIGN JF-HERE @ ALIGNED JF-HERE ! ;

: DOES>CUT   LATEST @ >CFA @ DUP JF-HERE @ > IF JF-HERE ! ;

: CREATE   JF-WORD JF-CREATE DOCREATE , ;
: (DODOES-INT)  ALIGN JF-HERE @ LATEST @ >CFA ! DODOES> ['] LIT ,  LATEST @ >DFA , ;
: (DODOES-COMP)  (DODOES-INT) ['] LIT , , ['] FIP! , ;
: DOES>COMP   ['] LIT , HERE 3 CELLS + , ['] (DODOES-COMP) , ['] EXIT , ;
: DOES>INT   (DODOES-INT) LATEST @ HIDDEN ] ;
: DOES>   STATE @ 0= IF DOES>INT ELSE DOES>COMP THEN ; IMMEDIATE

DROP
 HEX 1 CONSTANT ENABLE 0 CONSTANT DISABLE : BITMASK 1 SWAP LSHIFT ; 
 : SET_BIT BITMASK ROT 0= IF INVERT OVER @ AND ELSE OVER @ OR THEN SWAP ! ; 
 : GET_BIT SWAP @ SWAP RSHIFT 2 MOD ; 
 : MASK BITMASK 2* 1- SWAP BITMASK 1- - ; 
 : SET 2DROP ! ; 
 : GET OVER >R MASK SWAP @ AND R> RSHIFT ; 
 : R@ R> R> DUP >R SWAP >R ; 
 : ++ 1 SWAP +! ; 
 : -- 1 SWAP -! ; 
 : /100 64 / ; 
 FE000000 CONSTANT PERI_BASE PERI_BASE 200000 + CONSTANT GPIO_BASE PERI_BASE 804000 + CONSTANT I2C_BASE_REGISTER GPIO_BASE 	CONSTANT GPFSEL0 : REGISTERS_I2C{ I2C_BASE_REGISTER ; 
 : REGISTER DUP 4 + SWAP CONSTANT ; 
 : }REGISTERS_I2C DROP ; 
 REGISTERS_I2C{ REGISTER I2C_CONTROL REGISTER I2C_STATUS REGISTER I2C_DLEN REGISTER I2C_SLAVE_REGISTER REGISTER I2C_FIFO REGISTER I2C_CLOCK_DIVIDER REGISTER I2C_DATA_DELAY REGISTER I2C_CLOCK_STRETCH_TIMEOUT }REGISTERS_I2C : I2C I2C_CONTROL F SET_BIT ; 
 : ST 1 I2C_CONTROL 7 SET_BIT ; 
 : CLEAR 1 I2C_CONTROL 4 SET_BIT ; 
 : R_BIT 1 I2C_CONTROL 0 SET_BIT ; 
 : W_BIT 0 I2C_CONTROL 0 SET_BIT ; 
 : INTR I2C_CONTROL A SET_BIT ; 
 : INTT I2C_CONTROL 9 SET_BIT ; 
 : INTD I2C_CONTROL 8 SET_BIT ; 
 : CLKT I2C_STATUS 9 ; 
 : ERR I2C_STATUS 8 ; 
 : RXF I2C_STATUS 7 ; 
 : TXE I2C_STATUS 6 ; 
 : RXD I2C_STATUS 5 ; 
 : TXD I2C_STATUS 4 ; 
 : RXR I2C_STATUS 3 ; 
 : TXW I2C_STATUS 2 ; 
 : DONE I2C_STATUS 1 ; 
 : TA I2C_STATUS 0 ; 
 : RESET 1 -ROT SET_BIT ; 
 : DATA I2C_FIFO 0 7 ; 
 : I2C_INIT GPFSEL0 DUP @ FC0 INVERT AND 900 OR SWAP ! ENABLE I2C ; 
 : ?CHECK DONE GET_BIT TA GET_BIT 0= ERR GET_BIT 0= AND AND ; 
 : I2C_WRITE DONE RESET CLEAR DUP >R I2C_DLEN ! I2C_SLAVE_REGISTER ! W_BIT R> BEGIN 1- SWAP DATA SET DUP 0= UNTIL DROP ST BEGIN ?CHECK UNTIL ; 
 : I2C_READ DONE RESET DUP >R I2C_DLEN ! I2C_SLAVE_REGISTER ! R_BIT ST BEGIN ?CHECK UNTIL R> BEGIN 1- DATA GET SWAP DUP 0= UNTIL DROP ; 
 : SECONDS F4240 * ; 
 : MILLISECONDS 3E8 * ; 
 CREATE DELAY E49D0004 , E59F1018 , E1C120D0 , E1A04002 , E1C120D0 , E0422004 , E1520000 , 9AFFFFFB , E12FFF1E , FE003004 , DOES> JSR DROP ; 
 : REGISTER_TCS34725{ 0 ; 
 : REGISTER DUP 1+ SWAP CONSTANT ; 
 : SKIP 1+ ; 
 : }REGISTERS_TCS34725 DROP ; 
 REGISTER_TCS34725{ REGISTER REG_ENABLE REGISTER ATIME SKIP REGISTER WTIME REGISTER AILTL REGISTER AILTH REGISTER AIHTL REGISTER AIHTH SKIP SKIP SKIP SKIP REGISTER PERS REGISTER CONFIG SKIP REGISTER CONTROL SKIP SKIP REGISTER ID REGISTER STATUS REGISTER CDATAL REGISTER CDATAH REGISTER RDATAL REGISTER RDATAH REGISTER GDATAL REGISTER GDATAH REGISTER BDATAL REGISTER BDATAH }REGISTERS_TCS34725 : BIT_REGISTER_ENABLE{ 1 ; 
 : BIT DUP 2* SWAP CONSTANT ; 
 : SKIP 2* ; 
 : }BIT_REGISTER_ENABLE DROP ; 
 BIT_REGISTER_ENABLE{ BIT ENABLE_PON BIT ENABLE_AEN SKIP BIT ENABLE_WEN BIT ENABLE_AIEN }BIT_REGISTER_ENABLE 80 CONSTANT COMMAND_BIT 29 CONSTANT SLAVE_ADDRESS 0 CONSTANT R 1 CONSTANT G 2 CONSTANT B VARIABLE SUM VARIABLE MAX VARIABLE MIN CREATE RGB_COMPONENT 0 , 0 , 0 , DOES> SWAP CELLS + ; 
 : WRITE SLAVE_ADDRESS SWAP I2C_WRITE ; 
 : READ SLAVE_ADDRESS SWAP I2C_READ ; 
 : READ8 COMMAND_BIT OR 1 WRITE 1 READ ; 
 : WRITE8 COMMAND_BIT OR 1 WRITE 1 WRITE ; 
 : READ16 COMMAND_BIT OR 1 WRITE 2 READ 8 LSHIFT OR ; 
 : POWER_ON ENABLE_PON REG_ENABLE WRITE8 3 MILLISECONDS DELAY ENABLE_PON ENABLE_AEN OR REG_ENABLE WRITE8 ; 
 : POWER_OFF REG_ENABLE READ8 FC AND REG_ENABLE WRITE8 ; 
 : CONFIGURATION I2C_INIT 3 SECONDS DELAY POWER_ON ; 
 : CALCULATE_MIN DUP MIN ! OVER > IF DUP MIN ! THEN DROP DUP MIN @ < IF DUP MIN ! THEN DROP ; 
 : CALCULATE_MAX DUP MAX ! OVER < IF DUP MAX ! THEN DROP DUP MAX @ > IF DUP MAX ! THEN DROP ; 
 : RESET_COMPONENTS 0 R RGB_COMPONENT ! 0 G RGB_COMPONENT ! 0 B RGB_COMPONENT ! ; 
 : GET_RGB RDATAL READ16 GDATAL READ16 BDATAL READ16 CDATAL READ16 DUP 0= IF 2DROP 2DROP RESET_COMPONENTS ELSE SUM ! FF * SUM @ / ROT FF * SUM @ / ROT FF * SUM @ / DUP 2OVER CALCULATE_MIN MIN @ - G RGB_COMPONENT ! MIN @ - R RGB_COMPONENT ! MIN @ - B RGB_COMPONENT ! THEN ; 
 3E8FA000 CONSTANT FRAMEBUFFER FRAMEBUFFER 2FFFFF + CONSTANT FRAMEBUFFER_LIMIT 00FFFFFF CONSTANT WHITE 00FF0000 CONSTANT RED 0000FF00 CONSTANT GREEN 000000FF CONSTANT BLUE 00000000 CONSTANT BLACK VARIABLE WINDOW_HORIZ_LIMIT VARIABLE WINDOW_VERT_LIMIT VARIABLE WINDOW_DIAG_LIMIT VARIABLE NUM_DIGITS : GET_ADDRESS 400 * + 4 * FRAMEBUFFER + ; 
 : SET_PIXEL GET_ADDRESS ! ; 
 : PR 2DUP ! 4 + ; 
 : PL 2DUP ! 4 - ; 
 : PD 2DUP ! 1000 + ; 
 : PT 2DUP ! 1000 - ; 
 : PTR 2DUP ! FFC - ; 
 : TS 1000 - ; 
 : LS 4 - ; 
 : RS 4 + ; 
 : DS 1000 + ; 
 : ?LIMIT DUP FRAMEBUFFER_LIMIT > ; 
 : COLOR_DISPLAY FRAMEBUFFER BEGIN PR ?LIMIT UNTIL 2DROP ; 
 : LINE_HORIZ DUP ROT 1- 4 * + WINDOW_HORIZ_LIMIT ! BEGIN PR DUP WINDOW_HORIZ_LIMIT @ > UNTIL ; 
 : LINE_VERT DUP ROT 1- 1000 * - WINDOW_VERT_LIMIT ! BEGIN PT DUP WINDOW_VERT_LIMIT @ < UNTIL ; 
 : COLOR_RECTANGLE GET_ADDRESS DUP ROT 1000 * + WINDOW_VERT_LIMIT ! SWAP >R BEGIN 2DUP R@ SWAP LINE_HORIZ 2DROP DS DUP WINDOW_VERT_LIMIT @ > UNTIL 2DROP RDROP ; 
 : N1 RS RS RS RS DS PR PD PD PD PD PD PD PD PD PD PD PD PD PD PR PR PR PT PL PL PL PL PL PL PL PD PR PR PR PT PT PT PT PT PT PT PT PT PT PT PT PL PD PL PD PL PT TS TS TS RS RS RS RS RS RS RS RS RS ; 
 : N2 RS DS PD PR PR PR PR PR PR PD PL PD PR PD PL PL PD PL PD PL PD PL PD PL PD PD PD PD PD PR PR PR PR PR PR PR PT PL PL PL PL PL PL PT PT PT PT PR PT PR PT PR PT PR PT PR PT PR PT PT PL PT PL PL PL PL PL PT RS RS RS RS RS RS RS RS ; 
 : N3 DS RS PD PR PT PR PD PR PT PR PD PR PT PR PR PD PL PD PR PL PD PL PD PL PD PL PD PL PD PD PR PR PR PR PD PD PD PD PL PL PL PL PL PL PD PR PR PR PR PR PR PR PT PT PT PT PT PT PL PL PL PL PR RS RS RS RS RS TS TS TS TS TS TS TS TS ; 
 : N4 RS RS RS RS RS RS RS DS PD PD PD PD PD PD PD PD PD PR PD PL PD PD PD PL PT PT PT PT PT PT PT PT PT PT PT PT PT PL PD PD PL PD PR PD PL PL PD PR PL PD PD PD PD PR PR PD PL PL PL PL PT PR PT PL PR PT PT PT TS TS TS TS TS TS RS RS RS RS RS RS RS RS ; 
 : N5 DS RS PD PD PD PD PD PD PR PR PR PR PR PD PR PD PD PD PD PL PD PL PL PL PL PL PD PR PR PR PR PR PR PT PR PT PT PT PT PT PT PL PT PL PL PL PL PL PT PT PT PT PT PR PD PR PT PR PD PR PT PR PD PR PT PT RS RS ; 
 : N6 DS RS PD PD PD PD PD PD PD PD PD PD PD PD PD PR PT PT PT PT PT PR PR PR PR PR PD PD PD PD PL PL PL PL PD PR PR PR PR PR PT PT PT PT PT PT PL PL PL PL PL PL PT PT PT PT PT PT PR PR PR PR PR PR PT PL PL PL PL PL PL PT RS RS RS RS RS RS RS RS ; 
 : N7 DS RS PD PR PT PR PD PR PT PR PD PR PT PR PD PD PD PL PD PL PD PL PD PL PD PD PD PD PD PD PD PR PT PT PT PT PT PT PT PR PT PR PT PR PT PR PT PT PT PT RS RS ; 
 : N8 DS RS RS RS PD PL PD PL PD PD PR PT PR PT PD PD PD PL PR PD PD PD PL PD PL PD PD PR PT PR PT PD PD PD PL PR PD PR PT PR PD PR PT PR PT PL PT PR PR PD PT PT PL PL PT PR PL PT PL PL PT PR PR PT PT PT PT PR PD PD PD PT PR PT PT PL PT PL PL PL PT PR PR PT RS RS RS RS ; 
 : N9 DS RS PD PD PD PD PD PD PR PR PR PR PR PR PD PD PD PD PD PD PL PL PL PL PL PL PD PR PR PR PR PR PR PR PT PT PT PT PT PT PT PT PL PL PL PL PL PL PT PT PT PT PT PR PD PR PR PR PR PD PD PD PR PT PT PT PT PL PL PL PL PT RS RS RS RS RS RS ; 
 : N0 DS RS RS RS PD PL PD PR PD PL PL PD PR PD PL PD PR PD PL PD PR PD PL PD PR PR PD PL PD PR PD PR PT PT PR PD PD PR PT PR PT PL PT PR PR PT PL PT PR PT PL PT PR PT PL PT PR PT PL PL PT PR PT PL PL PD PL PT PT PR PR PT RS RS RS RS ; 
 : % RS RS DS PD LS PD PD RS PR TS PT PT RS RS RS RS PD PD LS PD PD LS PD PD LS PD PD LS PD PD LS PD PD LS PD PR RS RS RS RS PT LS PT PT RS PR DS PD PR RS RS TS TS TS TS TS TS TS TS TS TS TS TS TS ; 
 CREATE DIGIT ' N0 , ' N1 , ' N2 , ' N3 , ' N4 , ' N5 , ' N6 , ' N7 , ' N8 , ' N9 , DOES> SWAP CELLS + @ EXECUTE ; 
 : SPLIT 0 NUM_DIGITS ! BEGIN A /MOD NUM_DIGITS ++ DUP 0= UNTIL DROP ; 
 : PRINT GET_ADDRESS >R SPLIT WHITE R> BEGIN ROT DIGIT NUM_DIGITS -- NUM_DIGITS @ 0= UNTIL 2DROP ; 
 30 CONSTANT INITIAL_VALUE A0 CONSTANT FINAL_VALUE 8 CONSTANT POINT_OFFSET FINAL_VALUE INITIAL_VALUE - 1+ POINT_OFFSET / 1+ CONSTANT NUM_POINT 2710 NUM_POINT 3 * / CONSTANT INCREMENT 1EC CONSTANT X_RATE 190 CONSTANT Y_RATE X_RATE 1E + CONSTANT X_% 2710 NUM_POINT 3 * INCREMENT * - CONSTANT INITIAL_RATE 384 CONSTANT BAR_WIDTH 10 CONSTANT BAR_HEIGHT 3E CONSTANT X_ORIGIN_BAR 1C0 CONSTANT Y_ORIGIN_BAR BAR_WIDTH NUM_POINT 3 * / CONSTANT BAR_OFFSET CREATE X_INIT 40 , 240 , DOES> SWAP CELLS + @ ; 
 0 CONSTANT Y_INIT 180 CONSTANT WIDTH 180 CONSTANT HEIGHT 100 CONSTANT LENGHT_AXES 2F4 CONSTANT Y_ORIGIN CREATE X_ORIGIN 40 , 180 , 2C0 , DOES> SWAP CELLS + @ ; 
 VARIABLE CURRENT VARIABLE RATE 0 CONSTANT SX 1 CONSTANT DX : COLOR_WINDOW WIDTH HEIGHT ROT X_INIT Y_INIT COLOR_RECTANGLE ; 
 : PRINT_ARROW_VERT PD PL PD PL PD PL PD PL PD PR PR PT PT PR PD PD PR PR PR PR PR PT PL PL PL PT PR PR PL PT PL PT ! ; 
 : PRINT_ARROW_HORIZ PL PT PL PT PL PT PL PT PL PD PD PR PR PD PL PL PD PD PD PD PD PR PT PT PT PR PD PD PT PR PT PR ! ; 
 : AXE_HORIZ LENGHT_AXES SWAP LINE_HORIZ PRINT_ARROW_HORIZ ; 
 : AXE_VERT LENGHT_AXES SWAP LINE_VERT PRINT_ARROW_VERT ; 
 : PRINT_AXES GET_ADDRESS WHITE SWAP 2DUP AXE_VERT AXE_HORIZ ; 
 : PRINT_BISECTOR GET_ADDRESS WHITE SWAP DUP LENGHT_AXES FFC * - WINDOW_DIAG_LIMIT ! BEGIN PTR DUP WINDOW_DIAG_LIMIT @ < UNTIL 2DROP ; 
 : GRAPHS R X_ORIGIN Y_ORIGIN 2DUP PRINT_AXES PRINT_BISECTOR G X_ORIGIN Y_ORIGIN 2DUP PRINT_AXES PRINT_BISECTOR B X_ORIGIN Y_ORIGIN 2DUP PRINT_AXES PRINT_BISECTOR ; 
 : CALCULATE_COLOR DUP 0= IF DROP 10 LSHIFT ELSE DUP 1 = IF DROP 8 LSHIFT ELSE DROP THEN THEN ; 
 : SET_POINT PTR PL PL PD PD PR PR PT ! ; 
 : CALCULATE_POINT DUP >R X_ORIGIN Y_ORIGIN GET_ADDRESS SWAP DUP R@ CALCULATE_COLOR SX COLOR_WINDOW 4 * + GET_RGB R@ RGB_COMPONENT @ 4 SPACES DUP . CR DUP R@ CALCULATE_COLOR DX COLOR_WINDOW 1000 * - FF R> CALCULATE_COLOR SWAP SET_POINT ; 
 : PRINT_RATE BLACK 1E F X_RATE Y_RATE COLOR_RECTANGLE RATE @ /100 X_RATE Y_RATE PRINT WHITE X_% Y_RATE GET_ADDRESS % 2DROP ; 
 : PROGRESS_BAR WHITE BAR_WIDTH X_ORIGIN_BAR Y_ORIGIN_BAR GET_ADDRESS DUP >R LINE_HORIZ BAR_HEIGHT SWAP LINE_VERT DROP BAR_HEIGHT R> LINE_VERT BAR_WIDTH SWAP LINE_HORIZ 2DROP ; 
 : RESET_BAR X_ORIGIN_BAR 1+ CURRENT ! INITIAL_RATE RATE ! PRINT_RATE ; 
 : SET_BAR WHITE BAR_OFFSET BAR_HEIGHT 2- CURRENT @ Y_ORIGIN_BAR BAR_HEIGHT - 1+ COLOR_RECTANGLE CURRENT @ BAR_OFFSET + CURRENT ! INCREMENT RATE +! PRINT_RATE ; 
 : FILL_GRAPH INITIAL_VALUE BEGIN 2DUP DUP . SWAP CALCULATE_POINT SET_BAR POINT_OFFSET + DUP FINAL_VALUE > UNTIL 2DROP ; 
 : RESET_SCREEN BLACK COLOR_DISPLAY PROGRESS_BAR RESET_BAR GRAPHS ; 
 : START RESET_SCREEN CR ." RED" CR R FILL_GRAPH CR ." GREEN" CR G FILL_GRAPH CR ." BLUE" CR B FILL_GRAPH BLACK SX COLOR_WINDOW BLACK DX COLOR_WINDOW ; 
 CREATE COLOR_COUNTERS 0 , 0 , 0 , DOES> SWAP CELLS + ; 
 1E7 CONSTANT X_SQUARES 210 CONSTANT X_COUNTERS CREATE Y_COUNTERS 30 , 6F , AE , DOES> SWAP CELLS + @ ; 
 : REFRESH_LEGEND BLACK 40 180 200 0 COLOR_RECTANGLE R COLOR_COUNTERS @ X_COUNTERS R Y_COUNTERS PRINT G COLOR_COUNTERS @ X_COUNTERS G Y_COUNTERS PRINT B COLOR_COUNTERS @ X_COUNTERS B Y_COUNTERS PRINT ; 
 : RESET_COUNTERS 0 R COLOR_COUNTERS ! 0 G COLOR_COUNTERS ! 0 B COLOR_COUNTERS ! REFRESH_LEGEND ; 
 : PRINT_LEGEND RED F F X_SQUARES R Y_COUNTERS COLOR_RECTANGLE GREEN F F X_SQUARES G Y_COUNTERS COLOR_RECTANGLE BLUE F F X_SQUARES B Y_COUNTERS COLOR_RECTANGLE REFRESH_LEGEND ; 
 : COUNT_COLOR GET_RGB R RGB_COMPONENT @ G RGB_COMPONENT @ B RGB_COMPONENT @ CALCULATE_MAX MAX @ CASE R RGB_COMPONENT @ OF R COLOR_COUNTERS ++ ENDOF G RGB_COMPONENT @ OF G COLOR_COUNTERS ++ ENDOF B RGB_COMPONENT @ OF B COLOR_COUNTERS ++ ENDOF ENDCASE REFRESH_LEGEND R RGB_COMPONENT @ R CALCULATE_COLOR G RGB_COMPONENT @ G CALCULATE_COLOR B RGB_COMPONENT @ B CALCULATE_COLOR OR OR DX COLOR_WINDOW ; 
